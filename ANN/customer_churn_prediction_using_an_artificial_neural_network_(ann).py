# -*- coding: utf-8 -*-
"""Customer churn prediction using an artificial neural network (ANN)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bVkwY-3VAG9emC97tIGS0L8qTWj9InNh
"""

import pandas as pd
import tensorflow as tf
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

data = pd.read_excel('CustomerChurnDataset.xlsx')
data = data.drop(columns='CustomerID')

label_encoder = LabelEncoder()
data['Gender'] = label_encoder.fit_transform(data['Gender'])
data['ContractType'] = label_encoder.fit_transform(data['ContractType'])
data['InternetService'] = label_encoder.fit_transform(data['InternetService'])
data['PaymentMethod'] = label_encoder.fit_transform(data['PaymentMethod'])
data['Dependents'] = label_encoder.fit_transform(data['Dependents'])
data['SeniorCitizen'] = label_encoder.fit_transform(data['SeniorCitizen'])

x = data.drop('Churn', axis=1)
y = data['Churn']

X_train, X_test, Y_train, Y_test = train_test_split(x,y, random_state=42, test_size=0.2)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

model = Sequential([
    Dense(16, input_dim=X_train.shape[1], activation='relu'),
    Dense(16, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics = ['accuracy']
)
model.fit(X_train, Y_train, epochs=100, batch_size=32)

train_loss, train_accuracy = model.evaluate(X_train, Y_train)
print(f'Training Accuracy: {train_accuracy * 100:.2f}%')

test_loss, test_accuracy = model.evaluate(X_test, Y_test)
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

new_customer = [[1, 24, 1, 29.85, 29.85, 0, 0, 0, 1, 1]]
new_customer_scaled = scaler.transform(new_customer)
churn_prediction = model.predict(new_customer_scaled)

if churn_prediction > 0.5:
    print("The customer is likely to churn.")
else:
    print("The customer is unlikely to churn.")