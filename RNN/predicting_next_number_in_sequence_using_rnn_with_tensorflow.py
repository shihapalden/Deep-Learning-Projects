# -*- coding: utf-8 -*-
"""Predicting Next Number in Sequence Using RNN with TensorFlow

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uxtRe1p7GHm5jsxtt8g69FStBbEBVte8
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

# Create a sequence of numbers
sequence = [i for i in range(1, 101)]
def create_dataset(sequence, step=1):
    """
    Create a dataset where X is a sequence of steps and y is the next number in the sequence.
    """
    x, y = [], []
    for i in range(len(sequence) - step):
        x.append(sequence[i:i + step])
        y.append(sequence[i + step])
    return np.array(x), np.array(y)

n_step = 3
x, y = create_dataset(sequence, n_step)
# Reshape the data
x = x.reshape(x.shape[0], x.shape[1])

# Define the model
model = Sequential([
    SimpleRNN(units=50, input_shape=(x.shape[1],1), activation='relu'),
    Dense(units=1)
])

# Compile & fit the model
model.compile(optimizer='adam', loss='mse', metrics=['accuracy'])
model.fit(x,y, epochs=50, verbose=1)

# Evaluate the model
loss, accuracy= model.evaluate(x, y, verbose=1)
print("Model Loss:", loss)
print("Model Accuracy:", accuracy)

# Predict the next number
input_sequence = np.array([[4,5,6]])
input_sequence = input_sequence.reshape(input_sequence.shape[0], input_sequence.shape[1], 1)
predicted_value = model.predict(input_sequence)
print("The predicted next number:", predicted_value[0][0])